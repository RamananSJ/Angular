--html--


<!-- Contact Team Chat Bot -->
<div class="chatbot-container">
    <div class="dim-overlay" id="dimOverlay"></div>
    <div class="chat-icon" id="chatIcon" (click)="openChat()">
        <i class="fas fa-comments"></i>
    </div>
    <div class="chatbot" id="chatbot">
        <div class="chat-header">
            <span>Contact Support</span>
            <button class="close-btn" (click)="closeChat()">&times;</button>
        </div>
        <div class="chat-body">
            <p>Hi! How can we assist you?</p>
            <div id="query-options">
                <button (click)="handleQuery('Where is my order?')">Where is my order?</button>
                <button (click)="handleQuery('I want to return an item')">I want to return an item</button>
                <button (click)="handleQuery('Payment issues')">Payment issues</button>
                <button (click)="handleQuery('Talk to an agent')">Talk to an agent</button>
            </div>
            <div id="chat-messages"></div>
            <input type="text" id="userInput" placeholder="Type a message..." (keypress)="handleKeyPress($event)" [disabled]="isChatDisabled">
            <button (click)="sendMessage()" [disabled]="isChatDisabled">Send</button>
        </div>
    </div>
</div>





--ts file --
import { Component } from '@angular/core';

@Component({
    selector: 'app-product-list',
    templateUrl: './product-list-grid.component.html',
    styleUrls: ['./product-list-grid.component.css']
})
export class ProductListComponent {
    isChatDisabled: boolean = true;

    openChat(): void {
        const chatbot = document.getElementById('chatbot') as HTMLElement;
        const chatIcon = document.getElementById('chatIcon') as HTMLElement;

        chatbot.style.display = 'block';
        setTimeout(() => {
            chatbot.classList.add('show-chat');
        }, 10);

        chatIcon.style.display = 'none';
    }

    closeChat(): void {
        const chatbot = document.getElementById('chatbot') as HTMLElement;
        const chatIcon = document.getElementById('chatIcon') as HTMLElement;

        chatbot.classList.remove('show-chat');
        setTimeout(() => {
            chatbot.style.display = 'none';
            chatIcon.style.display = 'flex';
        }, 400);
    }

    handleQuery(query: string): void {
        const chatMessages = document.getElementById('chat-messages') as HTMLElement;
        chatMessages.innerHTML += `<p><strong>You:</strong> ${query}</p>`;

        if (query === "Talk to an agent") {
            const dimOverlay = document.getElementById('dimOverlay') as HTMLElement;
            dimOverlay.style.display = 'block';

            const agentWaitingDiv = document.createElement('div');
            agentWaitingDiv.id = 'agent-waiting';
            agentWaitingDiv.className = 'agent-waiting';
            agentWaitingDiv.innerHTML = `
                <img src="headset.png" alt="Agent Connecting" width="50">
                <p>Connecting to an agent...</p>
            `;
            document.body.appendChild(agentWaitingDiv);

            setTimeout(() => {
                agentWaitingDiv.innerHTML = `<p>Wait time approx 1 min, please wait...</p>`;
            }, 2000);

            setTimeout(() => {
                agentWaitingDiv.innerHTML = `
                    <img src="headset.png" alt="Agent Connected" width="50">
                `;
                this.enableChat();
            }, 5000);

            setTimeout(() => {
                window.location.href = "blank.html";
            }, 7000);
        }
    }

    enableChat(): void {
        this.isChatDisabled = false;
        const dimOverlay = document.getElementById('dimOverlay') as HTMLElement;
        const agentWaitingDiv = document.getElementById('agent-waiting') as HTMLElement;

        dimOverlay.style.display = 'none';
        agentWaitingDiv.remove();
    }

    sendMessage(): void {
        const input = document.getElementById('userInput') as HTMLInputElement;
        const message = input.value.trim();

        if (message !== "") {
            const chatMessages = document.getElementById('chat-messages') as HTMLElement;
            chatMessages.innerHTML += `<p><strong>You:</strong> ${message}</p>`;
            input.value = "";
            this.scrollToBottom();
        }
    }

    handleKeyPress(event: KeyboardEvent): void {
        if (event.key === 'Enter') {
            this.sendMessage();
        }
    }

    scrollToBottom(): void {
        const chatMessages = document.getElementById('chat-messages') as HTMLElement;
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}


css file --
.chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
}

.chat-icon {
    width: 50px;
    height: 50px;
    background: #ffcc00;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 0 5px rgba(255, 204, 0, 0.7);
    transition: box-shadow 0.3s ease-in-out, transform 0.2s ease-in-out;
}

.dim-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 999;
}

.agent-waiting {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    z-index: 1000;
}

.agent-waiting img {
    display: block;
    margin: 0 auto;
}

.chat-icon i {
    font-size: 24px;
    color: #000;
}

.chatbot {
    width: 300px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    position: absolute;
    bottom: 60px;
    right: 0;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    display: none;
}

.show-chat {
    opacity: 1;
    transform: translateY(0);
}

.chat-header {
    background: #121212;
    color: #fff;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-body {
    padding: 10px;
    text-align: center;
}

#query-options button {
    display: block;
    width: 100%;
    padding: 10px;
    margin: 5px 0;
    background: #ffcc00;
    border: none;
    cursor: pointer;
    font-size: 14px;
}

#query-options button:hover {
    background: #e6b800;
}

#chat-messages {
    text-align: left;
    padding: 10px;
    height: 150px;
    overflow-y: auto;
    border-top: 1px solid #ccc;
}

.chat-body input, .chat-body button {
    width: 90%;
    padding: 8px;
    margin-top: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.waiting-icon {
    display: inline-block;
    font-size: 16px;
    margin-right: 5px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
